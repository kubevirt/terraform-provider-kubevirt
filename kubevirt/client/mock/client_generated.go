// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	v1 "kubevirt.io/client-go/api/v1"
	v1alpha1 "kubevirt.io/containerized-data-importer/pkg/apis/core/v1alpha1"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateVirtualMachine mocks base method
func (m *MockClient) CreateVirtualMachine(vm *v1.VirtualMachine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualMachine", vm)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualMachine indicates an expected call of CreateVirtualMachine
func (mr *MockClientMockRecorder) CreateVirtualMachine(vm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualMachine", reflect.TypeOf((*MockClient)(nil).CreateVirtualMachine), vm)
}

// GetVirtualMachine mocks base method
func (m *MockClient) GetVirtualMachine(namespace, name string) (*v1.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachine", namespace, name)
	ret0, _ := ret[0].(*v1.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachine indicates an expected call of GetVirtualMachine
func (mr *MockClientMockRecorder) GetVirtualMachine(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachine", reflect.TypeOf((*MockClient)(nil).GetVirtualMachine), namespace, name)
}

// UpdateVirtualMachine mocks base method
func (m *MockClient) UpdateVirtualMachine(namespace, name string, vm *v1.VirtualMachine, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVirtualMachine", namespace, name, vm, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualMachine indicates an expected call of UpdateVirtualMachine
func (mr *MockClientMockRecorder) UpdateVirtualMachine(namespace, name, vm, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualMachine", reflect.TypeOf((*MockClient)(nil).UpdateVirtualMachine), namespace, name, vm, data)
}

// DeleteVirtualMachine mocks base method
func (m *MockClient) DeleteVirtualMachine(namespace, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualMachine", namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualMachine indicates an expected call of DeleteVirtualMachine
func (mr *MockClientMockRecorder) DeleteVirtualMachine(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualMachine", reflect.TypeOf((*MockClient)(nil).DeleteVirtualMachine), namespace, name)
}

// CreateVirtualMachineInstance mocks base method
func (m *MockClient) CreateVirtualMachineInstance(vm *v1.VirtualMachineInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualMachineInstance", vm)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualMachineInstance indicates an expected call of CreateVirtualMachineInstance
func (mr *MockClientMockRecorder) CreateVirtualMachineInstance(vm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualMachineInstance", reflect.TypeOf((*MockClient)(nil).CreateVirtualMachineInstance), vm)
}

// GetVirtualMachineInstance mocks base method
func (m *MockClient) GetVirtualMachineInstance(namespace, name string) (*v1.VirtualMachineInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachineInstance", namespace, name)
	ret0, _ := ret[0].(*v1.VirtualMachineInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachineInstance indicates an expected call of GetVirtualMachineInstance
func (mr *MockClientMockRecorder) GetVirtualMachineInstance(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachineInstance", reflect.TypeOf((*MockClient)(nil).GetVirtualMachineInstance), namespace, name)
}

// UpdateVirtualMachineInstance mocks base method
func (m *MockClient) UpdateVirtualMachineInstance(namespace, name string, vm *v1.VirtualMachineInstance, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVirtualMachineInstance", namespace, name, vm, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualMachineInstance indicates an expected call of UpdateVirtualMachineInstance
func (mr *MockClientMockRecorder) UpdateVirtualMachineInstance(namespace, name, vm, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualMachineInstance", reflect.TypeOf((*MockClient)(nil).UpdateVirtualMachineInstance), namespace, name, vm, data)
}

// DeleteVirtualMachineInstance mocks base method
func (m *MockClient) DeleteVirtualMachineInstance(namespace, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualMachineInstance", namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualMachineInstance indicates an expected call of DeleteVirtualMachineInstance
func (mr *MockClientMockRecorder) DeleteVirtualMachineInstance(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualMachineInstance", reflect.TypeOf((*MockClient)(nil).DeleteVirtualMachineInstance), namespace, name)
}

// CreateDataVolume mocks base method
func (m *MockClient) CreateDataVolume(vm *v1alpha1.DataVolume) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataVolume", vm)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDataVolume indicates an expected call of CreateDataVolume
func (mr *MockClientMockRecorder) CreateDataVolume(vm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataVolume", reflect.TypeOf((*MockClient)(nil).CreateDataVolume), vm)
}

// GetDataVolume mocks base method
func (m *MockClient) GetDataVolume(namespace, name string) (*v1alpha1.DataVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataVolume", namespace, name)
	ret0, _ := ret[0].(*v1alpha1.DataVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataVolume indicates an expected call of GetDataVolume
func (mr *MockClientMockRecorder) GetDataVolume(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataVolume", reflect.TypeOf((*MockClient)(nil).GetDataVolume), namespace, name)
}

// UpdateDataVolume mocks base method
func (m *MockClient) UpdateDataVolume(namespace, name string, dv *v1alpha1.DataVolume, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataVolume", namespace, name, dv, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDataVolume indicates an expected call of UpdateDataVolume
func (mr *MockClientMockRecorder) UpdateDataVolume(namespace, name, dv, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataVolume", reflect.TypeOf((*MockClient)(nil).UpdateDataVolume), namespace, name, dv, data)
}

// DeleteDataVolume mocks base method
func (m *MockClient) DeleteDataVolume(namespace, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataVolume", namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDataVolume indicates an expected call of DeleteDataVolume
func (mr *MockClientMockRecorder) DeleteDataVolume(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataVolume", reflect.TypeOf((*MockClient)(nil).DeleteDataVolume), namespace, name)
}
